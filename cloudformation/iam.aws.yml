Description: Iam resources

Parameters:
  StackPrefix:
    Type: String
    Description: The prefix of the stack

Resources:
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 'lambda:*'
                Effect: 'Allow'
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          PolicyName: LambdaFullAccessPolicy
      RoleName: !Sub "${AWS::StackName}-ApiGatewayRole"

  CodeBuildServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: "/service-role/"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "ec2:*"
                  - "cloudformation:ListStackResources"
                  - "cloudformation:CreateChangeSet"
                  - "CloudFormation:CreateStack"
                  - "CloudFormation:UpdateStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:ValidateTemplate"
                  - "ssm:GetParameters"
                  - "elasticloadbalancing:*"
                  - "iam:*"
                  - "autoscaling:*"
                  - "elaslasticLoadBalancingV2:*"
                  - "route53:*"
                Effect: "Allow"
                Resource: "*"
              - Action:
                  - "s3:*"
                Effect: "Allow"
                Resource: !Sub "arn:aws:s3:::${StackPrefix}-*"
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Effect: "Allow"
                Resource: !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*"
              - Action:
                  - "codecommit:GitPull"
                Effect: "Allow"
                Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:*"
              - Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
                Effect: "Allow"
                Resource: !Sub "arn:aws:codebuiuld:${AWS::Region}:${AWS::AccountId}:report-group/*"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
          PolicyName: CodeBuildBasePolicy
      RoleName: !Sub "${AWS::StackName}-CodeBuildServiceRole"

  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/service-role/"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                Resource: '*'
                Condition:
                  StringEqualsIfExists:
                    'iam:PassedToService':
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Action:
                  - "codecommit:*"
                  - "codedeploy:*"
                  - "codestar-connections:UseConnection"
                  - "lambda:InvokeFunction"
                  - "lambda:ListFunctions"
                  - "elasticbeanstalk:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "ssm:GetParameters"
                  - "sqs:*"
                Resource: "*"
              - Action:
                  - "s3:*"
                Effect: "Allow"
                Resource: !Sub "arn:aws:s3:::${StackPrefix}-*"
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Effect: "Allow"
                Resource: !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*"
              - Action:
                  - "codecommit:GitPull"
                Effect: "Allow"
                Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:*"
              - Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
                Effect: "Allow"
                Resource: !Sub "arn:aws:codebuiuld:${AWS::Region}:${AWS::AccountId}:report-group/*"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:codebuild"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:codebuild:*"
          PolicyName: CodeBuildBasePolicy
      RoleName: !Sub "${AWS::StackName}-CodePipelineServiceRole"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          PolicyName: LambdaLogPolicy
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "dynamodb:*"
                Effect: "Allow"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
          PolicyName: LambdaDynamoDbPolicy
      RoleName: !Sub "${AWS::StackName}-LambdaRole"

Outputs:
  ApiGatewayRoleArn:
    Description: The ARN of the ApiGateway Role
    Value: !GetAtt ApiGatewayRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayRoleArn"

  CodeBuildServiceRoleArn:
    Description: The ARN of the CodeBuildService Role
    Value: !GetAtt CodeBuildServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodeBuildServiceRoleArn"

  CodePipelineServiceRoleArn:
    Description: The ARN of the CodePipelineService Role
    Value: !GetAtt CodePipelineServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodePipelineServiceRoleArn"

  LambdaRoleArn:
    Description: The ARN of the Lambda Role
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaRoleArn"
